# -*- coding: utf-8 -*-
"""Villena_1.1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EKX8_7OeML7dXZtPrlp2Yq4hwzmWWhMj
"""

2 ** 16 #This code raises 2 to the power of 16

2 / 5, 2 / 5.0 #This code represents a division operation, which results to a floating number since the numerator < denominator

"spam" + "eggs" #Concatenates the two words

S = "ham" #Assignment/declaration of variable

"eggs " + S #Concatenates a word and an a variable that contains the 'ham' string

S*5 #Repeatedly prints out the word 'ham' (5 times) assigned in S variable

S[:0] #Slicing operation, the start index was omitted hence resulting to blank output

"green %s and %s" % ("eggs", S) #String formatting. % is a placeholder

('x',) [0] #Accessing an element from a tuple (x = 0)

('x', 'y') [1] #Accessing an element from a tuple (x = 0, y = 1)

L = [1,2,3] + [4,5,6] #Concatenates the two list

L, L[:], L[:0], L[-2], L[-2:] #L gives the full list of elements, L[:] generates a new copy of the list, L[:0] is an empty list hence it will not be printed out only brackets,
#L[-2] prints the 2nd to the last element, in reverse indexing starts from -1, L[:-2] generates a list starting from the 2nd to the last

([1,2,3] + [4,5,6]) [2:4] #Extracts the elements from the concatenated list

[L[2], L[3]] #Extracts the elements contained in the L variable

L.reverse(); L #Reversed the list in variable L. Reversing is different from sorting

L.sort(); L #Sorts out the list in variable L, from lowest to highest

L.index(4){'a':1, 'b':2} ['b'] #Results in error, because two different operations were expressed in a single line of code.

D = {'x':1, 'y':2, 'z':3} #Creation of a dictionary and assigned this to the D variable

D['w'] = 0 #Adding a new element in the dictionary created

D['x'] + D['w'] #Adding the values contained in the x and w

D[(1,2,3)] = 4 #Adding a new element in the dictionary created however instead of naming the key in string it was named in numbers (int)

D.keys(), D.values(), D.has_key((1,2,3)) [[]], ["", [], {}, None] #Results in error since the has_key is a non-existent function

"""# Define a list named L that contains four strings or numbers. Experiment with the following boundary cases."""

L = ['Ivan', 'Cassidy', 'Famacion', 'Villena']
L[66] #Prompts out of range
L[-9999:100] #Prompts out of range

L[3:1] #Empty list, since the start index (3) > end index (1)

L[3:1] = [?] #Syntax error, strings are immutable hence assignment is not allowed



"""##Define another list L, perform the following and use comments to explain:"""

L = [1, 2, 3, 4, 5, 6, 7, 8]
L[3] = [5, 6] #Assign a list as one of its element
L[2:4] = [] #Assign an empty list to a range
del L[0] #Delete an item in your list using the del statement
print(L) #Remaining indexes of the list is 0:4

L[0:5] = [] #Delete an entire range from your list. Add one index from the list to entirely delete
print(L)

L = [1, 2, 3, 4, 5, 6, 7, 8]
L[2:3] = [10] #Assign a non-sequence value to a slice.
print(L)

"""##Create a dictionary named D with three entries, for keys a, b, and c."""

D = {'a':10, 'b':20, 'c':30}

#What happens if you try to index a nonexistent key d (D[‘d’])?
D['d'] #Results in error, because this calls out a dict key which not included in the dictionary created

#What does python do if you try to assign to a nonexistent key?
D['d'] = 40 #Adds this to the present dictionary
print(D)

#Compare this to out of bounds assignments.

#Dictionaries allows creation of new keys while in list this must extended first before assigning a new one

"""##Run tests to answer the following questions:"""

#What happens when you try to use the + operator on different/mixed types?
L = ['Ivan', 'Villena']
M = [1, 2]
L + M #It can be still concanated despite difference in data type

#Does + work if one of the operands is a dictionary?
L = [1, 2]
M = {'a': 10, 'b': 20}
L + M #No, it does not work since only list can be only concatenated

#Try list.append() (use an actual list you created). Does the append() method work for both lists and strings?
L = ['Ivan', 'Cassidy']
M = [1, 2]
L.append('Villena')
M.append(3)
print(L, M) #The append method works for both strings and list

#Try concatenating (+) two lists or strings, what happens?
L = [10, 20, 30]
M = [40, 50, 60]
N = L + M #Creates a new list while the original lists remain unchanged
print(N)

"""##Define a string S of four characters. Then type the following expression: S[0] [0] [0] [0]. Explain what is happening."""

S = 'Ivan'
S[0] [0] [0] [0] #This extract the value contained in the index 0. Although this was typed repeteadly but Python recognizes this as one function

"""##Define a string S of 4 characters again: S = “spam”. Write an assignment that changes the string to “slam”, using only slicing and concatenation. Does it work? Try index assignment."""

S = 'spam'
S = S[:1] + 'l' + S[2:] #Direct modification of string is not allowed (immutability) hence in this cases slicing and modifcations are the remedies
print(S)

